package com.wow.definitions;
import java.util.*;
import java.lang.*;
//	Class representing each Node in the Workflow
public class Node{
    private String name;
    HashMap<String, Integer> rawInputResources = new HashMap <String, Integer>();
    HashMap<String, Integer> intermediateInputResources = new HashMap <String, Integer>();
    HashMap<String, Integer> outputResources = new HashMap <String, Integer>();
    boolean generatesFinalOutput;

    public Node(String name, boolean generatesFinalOutput){
    	this.name = name;
    	this.rawInputResources = new HashMap<String, Integer> ();
        this.outputResources = new HashMap<String, Integer> ();
        this.intermediateInputResources = new HashMap<String, Integer> ();
        this.generatesFinalOutput = generatesFinalOutput;            
    }
    //	Method to add a new input resource
    public void addInputResource(String resourceName, Integer quantity, boolean intemediate){
        if(intemediate){
            //  Intermediate Input resources i.e. resource generated by some other node
            //  which user can't create and pass it to this node
            //  which means this node depends on the other node for getting this resource
    	   this.intermediateInputResources.put(resourceName, quantity);
           return;
        }
        this.rawInputResources.put(resourceName, quantity);
    }
    //  Method to add a new input resource
    public void addOutputResource(String resourceName, Integer quantity){
        this.outputResources.put(resourceName, quantity);
    }
    public String getName(){
        return this.name;
    }
    //	Method to get all raw input resources for this node
    public HashMap<String, Integer> getAllRawInputResources(){
    	return this.rawInputResources;
    }
    //  Method to get all intermediate input resources for this node
    public HashMap<String, Integer> getAllIntermediateInputResources(){
        return this.intermediateInputResources;
    }
    //  Method to get all output resources for this node
    public HashMap<String, Integer> getAllOutputResources(){
        return this.outputResources;
    }
    public void setRawInputResources(HashMap<String, Integer> resources){
        this.rawInputResources = resources;
    }
    public void setIntermediateInputResources(HashMap<String, Integer> resources){
        this.intermediateInputResources = resources;
    }
    public void setOutputResources(HashMap<String, Integer> resources){
        this.outputResources = resources;
    }
    public HashMap <String, ArrayList<Integer>> setUpRuntimeInputResources(){
        HashMap<String, ArrayList<Integer>> result = new HashMap<String, ArrayList<Integer>> ();
        Iterator it = this.rawInputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            System.out.println(pair.getKey() + " = " + pair.getValue());
            ArrayList<Integer> quantities = new ArrayList<Integer> ();
            quantities.add((Integer)pair.getValue());
            quantities.add((Integer)pair.getValue());
            result.put((String)pair.getKey(), quantities);
        }
        it = this.intermediateInputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            System.out.println(pair.getKey() + " = " + pair.getValue());
            ArrayList<Integer> quantities = new ArrayList<Integer> ();
            quantities.add((Integer)pair.getValue());
            quantities.add((Integer)pair.getValue());
            result.put((String)pair.getKey(), quantities);
        }
        return result;
    }
    public HashMap <String, ArrayList<Integer>> setUpRuntimeOuputResources(){
        HashMap<String, ArrayList<Integer>> result = new HashMap<String, ArrayList<Integer>> ();
        Iterator it = this.outputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            System.out.println(pair.getKey() + " = " + pair.getValue());
            ArrayList<Integer> quantities = new ArrayList<Integer> ();
            quantities.add((Integer)pair.getValue());
            quantities.add(0);
            result.put((String)pair.getKey(), quantities);
        }
        return result;
    }
    public String toString(){
        String s = new String();
        s+= "Node " + this.name + "\n";
        s+= "\t Showing Raw Input Resources generated by this node --" + "\n";
        Iterator it = this.rawInputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            s+= "\t\t ID = " + pair.getKey() + " quantity = " + pair.getValue() + "\n";
        }
        s+= "\t Showing Intermediate Input Resources generated by this node --" + "\n";
        it = this.intermediateInputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            s+= "\t\t ID = " + pair.getKey() + " quantity = " + pair.getValue() + "\n";
        }
        s+= "\t Showing Ouput Resources generated by this node --" + "\n";
        it = this.outputResources.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            s+= "\t\t ID = " + pair.getKey() + " quantity = " + pair.getValue() + "\n";
        }
        if(this.generatesFinalOutput){
            s+= "\tThis node generates final Output!";
        }
        return s;
    }
  }
